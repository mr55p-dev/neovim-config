-- LSP
-- return {
-- 	{
-- 		"neovim/nvim-lspconfig",
-- 		config = function()
-- 			-- Mappings.
-- 			-- See `:help vim.diagnostic.*` for documentation on any of the below functions
-- 			-- Use an on_attach function to only map the following keys
-- 			-- after the language server attaches to the current buffer
-- 			local on_attach = function(_, bufnr)
-- 			end
--
-- 			local lsp_flags = {
-- 				-- This is the default in Nvim 0.7+
-- 				debounce_text_changes = 150,
-- 			}
--
-- 			local capabilities = require("cmp_nvim_lsp").default_capabilities()
--
-- 			require("lspconfig")["pyright"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["rust_analyzer"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["sqlls"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["tsserver"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["lua_ls"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 				settings = {
-- 					Lua = {
-- 						diagnostics = {
-- 							globals = { "vim" },
-- 						},
-- 					},
-- 				},
-- 			})
--
-- 			require("lspconfig")["terraform_lsp"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["html"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["gopls"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
--
-- 			require("lspconfig")["cssls"].setup({
-- 				on_attach = on_attach,
-- 				flags = lsp_flags,
-- 				capabilities = capabilities,
-- 			})
-- 		end,
-- 	}, -- Collection of configurations for built-in LSP client
-- 	{
-- 		"williamboman/mason.nvim",
-- 		config = {
-- 			ui = {
-- 				border = "single",
-- 			},
-- 		},
-- 		keys = {
-- 			{ "<Leader>lm", "<cmd>:Mason<CR>", silent = true, desc = "Open mason" },
-- 		},
-- 		dependencies = {
-- 			{
-- 				"williamboman/mason-lspconfig.nvim",
-- 				config = {
-- 					ensure_installed = {
-- 						"clangd",
-- 						"gopls",
-- 						"rust_analyzer",
-- 						"pyright",
-- 						"html",
-- 						"cssls",
-- 						"tsserver",
-- 						"lua_ls",
-- 						"sqlls",
-- 					},
-- 					automatic_installation = true,
-- 				},
-- 			}, -- Automatically install language servers to stdpath
-- 		},
-- 	}, -- Manage external editor tooling i.e LSP servers
-- 	{
-- 		"weilbith/nvim-code-action-menu",
-- 		cmd = "CodeActionMenu",
-- 		keys = {
-- 			{
-- 				"<C-.>",
-- 				function()
-- 					vim.cmd([[CodeActionMenu]])
-- 				end,
-- 				mode = { "n", "i" },
-- 				desc = "Code actions",
-- 			},
-- 		},
-- 	},
-- 	{
-- 		"jose-elias-alvarez/null-ls.nvim",
-- 		config = {
-- 			sources = {
-- 				require("null-ls").builtins.code_actions.eslint_d,
-- 				require("null-ls").builtins.code_actions.refactoring,
--
-- 				require("null-ls").builtins.diagnostics.checkmake,
-- 				require("null-ls").builtins.diagnostics.commitlint,
-- 				require("null-ls").builtins.diagnostics.eslint_d,
-- 				require("null-ls").builtins.diagnostics.jsonlint,
-- 				require("null-ls").builtins.diagnostics.sqlfluff.with({
-- 					extra_args = { "--dialect", "snowflake" }, -- change to your dialect
-- 				}),
-- 				require("null-ls").builtins.diagnostics.yamllint,
--
-- 				require("null-ls").builtins.formatting.black,
-- 				require("null-ls").builtins.formatting.codespell,
-- 				require("null-ls").builtins.formatting.prettier_eslint,
-- 				require("null-ls").builtins.formatting.prettier,
-- 				require("null-ls").builtins.formatting.stylua,
-- 				require("null-ls").builtins.formatting.sqlfluff.with({
-- 					extra_args = { "--dialect", "snowflake" }, -- change to your dialect
-- 				}),
-- 				require("null-ls").builtins.formatting.terraform_fmt,
-- 			},
-- 		},
-- 	},
-- 	{
-- 		"simrat39/symbols-outline.nvim",
-- 		config = true,
-- 		cmd = { "SymbolsOutline", "SymbolsOutlineOpen", "SymbolsOutlineClose" },
-- 		keys = {
-- 			{
-- 				"<leader>do",
-- 				function()
-- 					vim.cmd([[SymbolsOutline]])
-- 				end,
-- 				desc = "Show symbol outline",
-- 				silent = true,
-- 			},
-- 		},
-- 	},
-- 	{
-- 		"folke/trouble.nvim",
-- 		dependencies = "kyazdani42/nvim-web-devicons",
-- 		config = true,
-- 		keys = {
-- 			{
-- 				"<leader>q",
-- 				function()
-- 					vim.cmd([[TroubleToggle document_diagnostics]])
-- 				end,
-- 				desc = "Toggle document diagnostics",
-- 			},
-- 			{
-- 				"<leader>Q",
-- 				function()
-- 					vim.cmd([[TroubleToggle workspace_diagnostics]])
-- 				end,
-- 				desc = "Toggle workspace diagnostics",
-- 			},
-- 		},
-- 	},
-- 	{
-- 		"dnlhc/glance.nvim",
-- 		config = {
-- 			height = 18,
-- 			border = {
-- 				enable = false,
-- 			},
-- 		},
-- 		keys = {
-- 			{ "gd", "<CMD>Glance definitions<CR>", desc = "Glance definition" },
-- 			{ "gr", "<CMD>Glance references<CR>", desc = "Glance references" },
-- 			{ "gy", "<CMD>Glance type_definitions<CR>", desc = "Glance type definition" },
-- 			{ "gm", "<CMD>Glance implementations<CR>", desc = "Glance implementations" },
-- 		},
-- 		event = "BufReadPost",
-- 	}, -- Glance window for code
-- }
return {}
